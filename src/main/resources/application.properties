# ----------------------------------------
# GENERAL APPLICATION SETTINGS
# ----------------------------------------
spring.application.name=demo
server.port=8585

# ----------------------------------------
# LOGGING (Optional - Adjust as needed)
# ----------------------------------------
# For verbose Spring AI logging
logging.level.org.springframework=TRACE
logging.level.org.springframework.web=TRACE
logging.level.org.springframework.ai=DEBUG

# For your application packages
logging.level.com.techisthoughts.ia.demo=TRACE
management.endpoints.web.exposure.include="loggers,health,info"

# ----------------------------------------
# SPRING AI - OLLAMA CONFIGURATION
# ----------------------------------------
spring.ai.ollama.base-url=http://localhost:11434
spring.ai.ollama.init.pull-model-strategy=WHEN_MISSING

# --- Ollama Chat Model Configuration ---
# Specifies the default model for ChatClient operations.
spring.ai.ollama.chat.model=qwen3:8b-q4_K_M
spring.ai.ollama.chat.options.model=qwen3:8b-q4_K_M

# Optional: Default options for all chat requests if not overridden programmatically.
spring.ai.ollama.chat.options.temperature=0.7
spring.ai.ollama.chat.options.top-k=50

# --- Ollama Embedding Model Configuration ---
# Specifies the default model for EmbeddingClient operations.

spring.ai.ollama.embedding.model=nomic-embed-text
# IMPORTANT: Ensure the 'dimension' in your MovieEntity's @Indexed vector field
# matches the output dimension of 'nomic-embed-text' (typically ).
# Optional: Default options for all embedding requests.
# spring.ai.ollama.embedding.options.truncate=true # Example: if you want to ensure truncation

# ----------------------------------------
# REDIS CONFIGURATION (Spring Data Redis)
# ----------------------------------------
spring.data.redis.host=localhost
spring.data.redis.port=6379
# spring.data.redis.password=yourpassword # Uncomment and set if Redis is password-protected
# spring.data.redis.timeout=60000ms # Optional: Connection timeout
# spring.data.redis.jedis.pool.max-active=8 # Optional: Jedis pool configuration (if using Jedis client)
# spring.data.redis.lettuce.pool.max-active=8 # Optional: Lettuce pool configuration (if using Lettuce client - default for Spring Boot)

# ----------------------------------------
# REDIS OM SPRING CONFIGURATION
# ----------------------------------------
# Redis OM will typically use the spring.data.redis properties above by default.
# These are usually not needed unless you need separate configurations for Redis OM.
# spring.redis.om.host=${spring.data.redis.host}
# spring.redis.om.port=${spring.data.redis.port}
# spring.redis.om.password=${spring.data.redis.password}

# Automatically create/update Redis Search indexes on startup.
# Set to 'true' for development to ensure indexes are created.
# For production, you might manage index creation differently.
# Use 'drop-and-create-index=true' with caution during development if you need to rebuild (will delete existing data in the index).
spring.redis.om.repositories.drop-and-create-index=true
#spring.redis.om.repositories.create-index=true

# Optional: Specify the package where your @Document entities are located if not automatically detected.
# spring.redis.om.base-packages=com.techisthoughts.ia.demo.repository.entity

# Optional: Configure the default embedder for @Vectorize if you were using it (not relevant if setting embeddings manually).
# spring.redis.om.vectorizers.default-embedder=ollamaEmbeddingClient # Example, bean name of your EmbeddingClient
# spring.redis.om.vectorizers.ollamaEmbeddingClient.api-key= # Not needed for local Ollama
# spring.redis.om.vectorizers.ollamaEmbeddingClient.model-name=${spring.ai.ollama.embedding.model}
# spring.redis.om.vectorizers.ollamaEmbeddingClient.dimensions=768 # Must match model